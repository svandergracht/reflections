How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By narrowing down the versions to just the differences, there was significantly less to compare.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you make a mistake and need to go back and fix it, you can easily access an old copy without the mistake.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: the save points are logical and you know where to search for old versions. Cons: user error could mean not enough or too many saves. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is code oriented, so a change in one file is likely to change another file. Google Docs has no reason to see connections between files.

How can you use the commands git log and git diff to view the history of files?

    git log shows a list of changes starting from most recent to least recent. git diff shows code changes between two commits.

How might using version control make you more confident to make changes that
could break something?

    Breaking something isn’t as big of a deal if it’s easy to access an old copy that isn’t broken. Then you can use git diff to locate the problem between copies.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use git to keep track of versions of large coding projects I do.
